# -*- coding: utf-8 -*-
"""210809_Hongik.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/14XMjutsEE-xVaTqtvWESXGjEJVn_o0Q3
"""

a = 5 # a에다가 5를 넣어라
print(a)

a = 3
b = 5
a + b

7 // 3 # 몫

7 % 3 # 나머지

a ** b # 제곱

# 문자열 자료형 : 클래스
# 클래스 : 함수들을 모아놓은 주머니

a = 'python'
a

a = 'python'
b = ' is too fun'
a + b

len(a)  # 문자열 a 의 길이

a[0]

a[1:3]  # 1번째부터 3번째 전까지

a[:5] # 0번째부터 5번째 전까지

# 문자열 : 클래스 == 함수들을 모아놓은 주머니
# 문자.함수이름

'I eat {} apples'.format(3) # 중괄호 안에 포맷 함수로 값을 넣어줄 수 있음

'I eat {} apples and {} oranges'.format(3, 5)

a = 3
b = 5

f'I eat {a} apples and {b} oranges' # .format()를 뒤에 쓰는 것 대신 앞에 f 붙여줌

a = 'hello world!'
a.count('o')  # 해당 문자의 개수

a.find('o') # 첫번째로 발견한 것의 위치

a.find('z') # 찾는 문자가 없으면 -1 출력

a.upper() # 대문자로 변환

a.lower() # 소문자로 변환

'.'.join('abcd')

'@@'.join(['a','b','c','d'])

a = '     hello      '
a.lstrip()

a.rstrip()

a.strip()

a = 'python is too fun'
a

a.replace('python', 'java')
# a.replace('뷃', '')

a.split() # 공백을 기준으로 잘라서 리스트에 저장
# 리스트 : 데이터를 저장하고 관리하는 기능

# 리스트 : 클래스 == 함수들

a = [1, 3, 5, 7, 9]

a[0]

a[3]

a[-1]

a[1:3]

a = [1,2,3,[4,5]]
# 퀴즈 : '4'만 출력해보세요

a[3][0]

a[1:]

a = [1,2,3]
b = [4,5,6]

a + b

a - b

a * 3

len(a)

# replace() : 문자열 함수, 리스트에서는 사용 불가

a[1] = 7
a

del a[1]
a[1]

a = [1,2,3,4,5]
del a[2:]
a

a = [1,2,3]
a.append(4)
a

a.insert(0,5) # 0번째 자리에 5를 삽입
a

a.append([2,3])
a

a = [1,4,3,2]
a.sort()  # 정렬함수
a

a.reverse()
a

a = ['car', 'apple', 'banana']
a.sort()
a

a = [4,3,2,1]
a.index(1)  # '1' 원소가 있는 인덱스 자리

# 예외처리 : 오류를 처리하는 방법
try:
  a.index(0)
except:
  print('해당 숫자는 리스트 안에 없습니다.')

a.remove(1) # 리스트 안에 처음으로 있는 해당 원소만을 제거
a

a = [1,2,3,1]
a.remove(1)
a

a = [1,2,3]
target = a.pop()  # 맨 마지막에 있는 값을 끄집어내서 저장
a

target

a = [1,2,3]
target = a.pop(0)
a

target

# 튜플 : 리스트랑 똑같다. 하지만 튜플은 한 번 정해지면 수정이 불가능하다

a = (1,2,3,4,5)
a

a[0]

a[1:]

# del a[0]  # 불가능

a = 3,5 # 튜플로 자동 저장
a

a = (3) # 한개는 튜플로 만들 수 없다. 강제로 만드려면 (3,) 형태로 저장
a

# 딕셔너리

a = {'이름' : '송민영', '나이' : 24, '성별' : '여자', '이메일' : 'mysong914@gmail.com'}
a

# 딕셔너리는 무조건 key 값 기준

a['이름']

'이름' in a

'송민영' in a

a['학교'] = '홍익대학교'
a

del a['성별']
a

a['이름'] = '송'
a

# 딕셔너리 전용함수

a.keys()  # key 값들만 보여줌

a.values()  # value 값들만 보여줌

a.items() # key,value 짝을 리스트로 저장하여 보여줌

# 집합의 성질
# 1. 중복을 허용하지 않는다
# 2. 순서가 없다

a = set([1,2,3,1,1,1])
a

a = set('hello world!')
a

a = [1,2,3,1,1,2]
a = set(a)
a

a = list(a)
a

a = set([1,2,3,4,5,6])
b = set([4,5,6,7,8,9])

a & b

a | b

a - b

a

a.add(7)  # 집합에 값 추가
a

a.update([8,9,10])  # update 함수를 사용해서 여러개를 한번에 추가
a

a.remove(10)
a

# bool 자료형 : 참과 거짓

# 참 : True
# 거짓 : False

5 > 3

# 비어있으면 False
# 숫자는 0 이면 False

bool(0)

bool([])

bool([3])

bool('')

bool('t')

a,b = 3,4
a

b

a = 3
b = 5

a,b = b,a
print(a,b)

# 리스트, 튜플, 딕셔너리 값들은 복사를 못함
# -> 데이터 용량이 너무 클 수도 있기 때문에
# b = a 이런식의 명령어는
# a 리스트를 b라는 변수로도 가리킬 수 있도록 같은 이름으로 본다고 해석
a = [1,2,3,4,5]
b = a
b[1] = 7
print(b)
print(a)
# 값은 b에서만 수정했지만 결과적으로 a도 바뀜

a = [1,2,3,4,5]
b = a[:]  # b에 a 리스트 값을 복사하려면 이런식으로 사용
b

b[1] = 7
b

a

a = '881120-1068234'
a[7:]

a.split('-')[1]

a = 'a:b:c:d'
a.replace(':','#')

a = ['Python', 'is', 'too', 'fun']
" ".join(a)

a = [1,2,3,4,5]
tuple(a)

a = (1,2,3,4,5)
list(a)

a = (1,2,3)
a = list(a)
a.append(4)
a = tuple(a)
a

# If문
# if 조건:

money = True
if money != True:
  print('taxi')
else: print('walk')

money = 2000

if money >= 3000:
  print('taxi')
else:
  print('walk')

money = 2000
card = True

if money >= 3000 or card == True:
  print('taxi')
else:
  print('walk')

pocket = ['paper', 'cellphone', 'money']

if 'money' in pocket:
  print('taxi')
else:
  pirnt('walk')

